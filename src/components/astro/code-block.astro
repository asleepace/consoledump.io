---
import { cn } from '@/lib/utils'

export interface Props {
  code?: string
  title?: string
  filename?: string
  showLineNumbers?: boolean
  highlightLines?: number[]
  'data-language'?: string
}

const props = Astro.props
const { title, filename, 'data-language': lang } = props
const uniqueRef = crypto.randomUUID().slice(0, 8)
---

<div
  id="code-container"
  class={cn(
    'code-container text-neutral-800 inset-shadow-2xs border-transparent ring-0 transition-all duration-400 ease-in-out rounded-sm',
    '[&[data-copied]]:scale-[1.01] [&[data-copied]]:opacity-80 [&[data-copied]]:ring-4 [&[data-copied]]:ring-amber-300 [&[data-copied]]:shadow-lg',
    'max-w-full overflow-hidden' // Changed here
  )}
>
  {
    (title || filename) && (
      <div class="code-header">
        {filename && <span class="code-filename">{filename}</span>}
        {title && <span class="code-title">{title}</span>}
        <span class="code-lang">{lang}</span>
      </div>
    )
  }
  <div id={uniqueRef} class="code-wrapper overflow-x-auto">
    <!-- Removed min-w-max -->
    <pre class="pt-1 px-2 min-w-max" {...props}><slot /></pre>
  </div>
</div>

<script is:inline define:vars={{ uniqueRef }}>
  const codeWrapper = document.getElementById(uniqueRef)

  codeWrapper?.addEventListener('dblclick', async () => {
    try {
      const code = document.querySelector(`#${uniqueRef} pre > code`)
      navigator.clipboard.writeText(code.textContent)
      codeWrapper.parentElement.setAttribute('data-copied', '1')
    } catch (err) {
      console.warn('[code] failed to save code:', err)
    } finally {
      setTimeout(() => {
        codeWrapper.parentElement.removeAttribute('data-copied')
      }, 300)
    }
  })
</script>

<style is:global>
  @import 'tailwindcss';

  pre > code {
    all: unset;
    display: block; /* Added */
  }

  pre {
    @apply !bg-neutral-800;
  }

  .code-container {
    max-width: 100%;
    width: 100%;
    margin: 0.4rem 0;
    overflow: hidden;
  }

  .code-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 0.75rem 1rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    font-size: 0.875rem;
  }

  .code-filename {
    color: var(--color-primary, #3b82f6);
    font-weight: 500;
  }

  .code-title {
    color: var(--color-text-secondary, #94a3b8);
  }

  .code-lang {
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .code-wrapper {
    position: relative;
    max-width: 100%; /* Added */
    overflow-x: auto;
  }

  pre {
    overflow-x: auto;
    font-size: 14px;
    line-height: 1.5;
    margin: 0;
    scrollbar-gutter: stable;
  }

  code {
    @apply bg-red-500;
    white-space: pre; /* Added */
  }

  /* Scrollbar styles... */
  pre::-webkit-scrollbar {
    height: 6px;
    background: transparent;
  }

  pre::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.05);
    margin: 0 4px;
  }

  pre::-webkit-scrollbar-thumb {
    background-color: var(--color-gray-700, #374151);
    border-radius: 3px;
    opacity: 0.7;
    transition: opacity 0.2s ease;
  }

  pre::-webkit-scrollbar-thumb:hover {
    opacity: 1;
  }
</style>
